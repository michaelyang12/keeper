/*
Copyright Â© 2025 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"github.com/michaelyang12/keeper/db"
	"github.com/michaelyang12/keeper/logging"
	"github.com/spf13/cobra"
)

// generateCmd represents the generate command
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Initialize keeper for first time use",
	Long: `Initialize keeper. Must run before initial use to setup ecnrypted local storage for storing credentials. The command can be run as is and an autogenerated password will be used for sqllite access (will be automatically stored and accessible under the tag "keeper"). Otherwise, if you with to specify a password, simply type your desired password after the init command.
	Usage: init <password>`,
	Run: func(cmd *cobra.Command, args []string) {
		// fmt.Println("Initializing db...")
		if len(args) > 1 {
			logging.Error("Error: Too many arguments provided for init %v\n")
			return
		}

		// Set password
		password := ""
		if len(args) > 0 {
			password = args[0]
		}

		if err := db.InitializeLocalDatabase(password); err != nil {
			logging.Error("Error during init command: %v\n", err)
			return
		}
		// fmt.Println("Successfully initialized local db")
	},
}

func init() {
	rootCmd.AddCommand(initCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// generateCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// generateCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
